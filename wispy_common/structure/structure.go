package structure

import (
	"database/sql"
	"net/http"
	"strings"
)

// RenderCtx represents the rendering context.
type RenderCtx struct {
	// Reference to the TemplateEngine.
	Engine TemplateEngine // *TemplateEngine
	// Data available during rendering.
	Data map[string]any
	// Props passed to the component.
	Props map[string]any
	// Defined block for in file partials.
	Blocks map[string]string
	// "Passed" stores ->
	// The layout content needs to be render first to ensure all operations are handled
	// so meta tags as well as import tags can be resolved and duped
	Passed string
	// Slots for block content.
	Slots map[string]string
	// The current directory the template engine should scan for sub folders like partials
	// This will be set to the site directory if using the wispy-engine but is being set as a string option to allow
	// few changes to support template engine use outside of the wispy-engine context
	CurrentTemplatePath string
	//
	Site            *SiteStructure
	ScopedDirectory string
	// Designated map to store flags or data needed by "unofficial" tags
	InternalFlags map[string]any
	// Reference to the current request so tags and other options have access to cookies etc.
	Request        *http.Request
	ResponseWriter *http.ResponseWriter
	// If User is logged in auth middleware can set their ID Here
	UserID string
	// The database to fetch user data from such as roles for role access tags
	UsersDB *sql.DB
	// Stores assets to either dynamically imported or inline into the page
	AssetRegistry *AssetRegistry
	// Tags to be dynamically rendered into the page head
	HeadTags *HeadTagRegistry
}

// represents the settings/presets of the current template engine instances
type TemplateEngine struct {
	// starting deliminator - default "{%"
	DelimStart string
	// starting deliminator  - default "%}"
	DelimEnd string
	// used to trim the start and end delim as well as leading and trailing whitespace
	CutSet string // generated by NewTemplateEngine() using default deliminator's
	// map to check template tags against when rendering
	TagMap map[string]TemplateTag
	// map to check template filters against when rendering
	FilterMap map[string]TemplateFilter
	// Wispy Config
	SITES_DIR        string
	PAGE_FILE_NAME   string
	FILE_EXT         string
	SITE_CONFIG_NAME string

	SiteMap map[string]SiteStructure
}

// Base function to create TemplateEngine instance used to to control base template settings
// RenderCtx references the Template engine to for engine settings like registered tags & filters
func (eng *TemplateEngine) Init(tagsMap []TemplateTag, filterMap []TemplateFilter) *TemplateEngine {
	// Wispy Config
	eng.SITES_DIR = "./sites"
	eng.PAGE_FILE_NAME = "page"
	eng.FILE_EXT = ".hstm"
	eng.SITE_CONFIG_NAME = "config.toml"
	//
	// Engine Config
	eng.DelimStart = "{%"
	eng.DelimEnd = "%}"
	//
	eng.TagMap = map[string]TemplateTag{}
	//
	eng.SiteMap = make(map[string]SiteStructure)
	//
	for _, tag := range tagsMap {
		eng.TagMap[tag.Name] = tag
	}
	eng.FilterMap = map[string]TemplateFilter{}
	for _, filter := range filterMap {
		eng.FilterMap[filter.Name] = filter
	}
	eng.GenCutSet(" \n\t") // generate initial CutSet whitespace
	return eng
}

func (engine *TemplateEngine) InitCtx(scopedDirectory string, site *SiteStructure, data map[string]any) *RenderCtx {
	return &RenderCtx{
		Engine:          *engine,
		Data:            data,
		Slots:           make(map[string]string),
		Passed:          "",
		Blocks:          make(map[string]string),
		Props:           make(map[string]any),
		Site:            site,
		ScopedDirectory: scopedDirectory,
		AssetRegistry: &AssetRegistry{
			assets:   make(map[AssetType][]*Asset),
			seen:     make(map[string]struct{}), // For deduplication
			depGraph: make(map[string][]string),
		},
		HeadTags: &HeadTagRegistry{
			tags: []*HeadTag{
				&HeadTag{
					TagName:    "meta",
					Attributes: []string{`charset="UTF-8"`},
				},
				&HeadTag{
					TagName:    "meta",
					Attributes: []string{`content="initial-scale=1.0,maximum-scale=1,width=device-width,viewport-fit=cover"`},
				},
			},
			seen: make(map[string]struct{}),
		},
		//
		InternalFlags: make(map[string]any, 1),
	}
}

// Resolves variables from the RenderCtx's Data map.
func (eng *TemplateEngine) GetData(ctx *RenderCtx, key string) any {
	if val, ok := ctx.Data[key]; ok {
		return val
	}
	return ""
}

// used to generate CutSet string for trimming tags when parsing
func (eng *TemplateEngine) GenCutSet(initial_cutset string) {
	var str = strings.Join([]string{initial_cutset, eng.DelimStart, eng.DelimEnd}, "")
	ia := len(str) / 2                  // initial allocation
	seen := make(map[rune]struct{}, ia) //fast lookup for weather a run has been seen if i'm not mistaken "struct{}" has a smaller memory footprint then "bool"
	cutset := make([]rune, ia)
	for _, r := range str {
		if _, ok := seen[r]; !ok {
			cutset = append(cutset, r)
			seen[r] = struct{}{}
		}
	}
	eng.CutSet = string(cutset)
}

// Universal template data filters function struct
type TemplateFilter struct {
	Name    string
	Handler func(pipedValue any, args []string) (value any, err error)
}

// Universal template tag function struct
type TemplateTag struct {
	Name string
	// render tag with given context and args, and children if a RequiresClosingTag is set
	Render func(
		// Executes expected logic writes results to strings.Builder and returns new index from to continue rendering
		// - Reference to the template engine struct
		// - Partials map,
		// - Data map fetched via eng.GetFunc(ctx *structure.RenderCtx, key string)
		ctx *RenderCtx,
		// Finalized output is written to the string building
		sb *strings.Builder,
		// The inner contexts of the tag being parsed
		// Example: "{% exampleTag ... ... ... %}"
		// (tags using closing tag for inner content are expected to resolve the closing tag and content then return update POS int)
		tag_contents,
		// entire input string mainly used if tag handles closing child_content + closing_tag
		raw string,
		// the current position within the raw input string
		pos int,
	) (new_pos int, errs []error)
}
